
vrs_cv4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c0c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d48  08000d50  00010d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000d48  08000d48  00010d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000d4c  08000d4c  00010d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010d50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000d50  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  2000001c  08000d50  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010d50  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002b1c  00000000  00000000  00010d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000085a  00000000  00000000  00013895  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000410  00000000  00000000  000140f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a8  00000000  00000000  00014500  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001579  00000000  00000000  000148a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001277  00000000  00000000  00015e21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00017098  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000108c  00000000  00000000  00017118  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  000181a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	08000d30 	.word	0x08000d30

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000004 	.word	0x20000004
 8000178:	08000d30 	.word	0x08000d30

0800017c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 800017c:	b480      	push	{r7}
 800017e:	b085      	sub	sp, #20
 8000180:	af00      	add	r7, sp, #0
 8000182:	6078      	str	r0, [r7, #4]
 8000184:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000186:	2300      	movs	r3, #0
 8000188:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800018a:	2300      	movs	r3, #0
 800018c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	685b      	ldr	r3, [r3, #4]
 8000192:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000194:	68fb      	ldr	r3, [r7, #12]
 8000196:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800019a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800019e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	791b      	ldrb	r3, [r3, #4]
 80001a4:	021a      	lsls	r2, r3, #8
 80001a6:	683b      	ldr	r3, [r7, #0]
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	4313      	orrs	r3, r2
 80001ac:	68fa      	ldr	r2, [r7, #12]
 80001ae:	4313      	orrs	r3, r2
 80001b0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	68fa      	ldr	r2, [r7, #12]
 80001b6:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	689b      	ldr	r3, [r3, #8]
 80001bc:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80001be:	68fa      	ldr	r2, [r7, #12]
 80001c0:	4b17      	ldr	r3, [pc, #92]	; (8000220 <ADC_Init+0xa4>)
 80001c2:	4013      	ands	r3, r2
 80001c4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80001c6:	683b      	ldr	r3, [r7, #0]
 80001c8:	691a      	ldr	r2, [r3, #16]
 80001ca:	683b      	ldr	r3, [r7, #0]
 80001cc:	68db      	ldr	r3, [r3, #12]
 80001ce:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80001d0:	683b      	ldr	r3, [r7, #0]
 80001d2:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80001d4:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	795b      	ldrb	r3, [r3, #5]
 80001da:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80001dc:	4313      	orrs	r3, r2
 80001de:	68fa      	ldr	r2, [r7, #12]
 80001e0:	4313      	orrs	r3, r2
 80001e2:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68fa      	ldr	r2, [r7, #12]
 80001e8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ee:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80001f6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	7d1b      	ldrb	r3, [r3, #20]
 80001fc:	3b01      	subs	r3, #1
 80001fe:	b2da      	uxtb	r2, r3
 8000200:	7afb      	ldrb	r3, [r7, #11]
 8000202:	4313      	orrs	r3, r2
 8000204:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000206:	7afb      	ldrb	r3, [r7, #11]
 8000208:	051b      	lsls	r3, r3, #20
 800020a:	68fa      	ldr	r2, [r7, #12]
 800020c:	4313      	orrs	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000216:	bf00      	nop
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	c0fff7fd 	.word	0xc0fff7fd

08000224 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2200      	movs	r2, #0
 8000236:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2200      	movs	r2, #0
 800023c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	2200      	movs	r2, #0
 8000242:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800024a:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	2201      	movs	r2, #1
 8000256:	751a      	strb	r2, [r3, #20]
}
 8000258:	bf00      	nop
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	bc80      	pop	{r7}
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop

08000264 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
 800026c:	460b      	mov	r3, r1
 800026e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000270:	78fb      	ldrb	r3, [r7, #3]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d006      	beq.n	8000284 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f043 0201 	orr.w	r2, r3, #1
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000282:	e005      	b.n	8000290 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	f023 0201 	bic.w	r2, r3, #1
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	609a      	str	r2, [r3, #8]
  }
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop

0800029c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800029c:	b480      	push	{r7}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4603      	mov	r3, r0
 80002ac:	70fb      	strb	r3, [r7, #3]
 80002ae:	460b      	mov	r3, r1
 80002b0:	70bb      	strb	r3, [r7, #2]
 80002b2:	4613      	mov	r3, r2
 80002b4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	2300      	movs	r3, #0
 80002bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80002be:	78fb      	ldrb	r3, [r7, #3]
 80002c0:	2b1d      	cmp	r3, #29
 80002c2:	d923      	bls.n	800030c <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80002c8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80002ca:	78fb      	ldrb	r3, [r7, #3]
 80002cc:	f1a3 021e 	sub.w	r2, r3, #30
 80002d0:	4613      	mov	r3, r2
 80002d2:	005b      	lsls	r3, r3, #1
 80002d4:	4413      	add	r3, r2
 80002d6:	2207      	movs	r2, #7
 80002d8:	fa02 f303 	lsl.w	r3, r2, r3
 80002dc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	43db      	mvns	r3, r3
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4013      	ands	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80002e8:	7879      	ldrb	r1, [r7, #1]
 80002ea:	78fb      	ldrb	r3, [r7, #3]
 80002ec:	f1a3 021e 	sub.w	r2, r3, #30
 80002f0:	4613      	mov	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	4413      	add	r3, r2
 80002f6:	fa01 f303 	lsl.w	r3, r1, r3
 80002fa:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80002fc:	68fa      	ldr	r2, [r7, #12]
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	4313      	orrs	r3, r2
 8000302:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	65da      	str	r2, [r3, #92]	; 0x5c
 800030a:	e06c      	b.n	80003e6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 800030c:	78fb      	ldrb	r3, [r7, #3]
 800030e:	2b13      	cmp	r3, #19
 8000310:	d923      	bls.n	800035a <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	68db      	ldr	r3, [r3, #12]
 8000316:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000318:	78fb      	ldrb	r3, [r7, #3]
 800031a:	f1a3 0214 	sub.w	r2, r3, #20
 800031e:	4613      	mov	r3, r2
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	4413      	add	r3, r2
 8000324:	2207      	movs	r2, #7
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	43db      	mvns	r3, r3
 8000330:	68fa      	ldr	r2, [r7, #12]
 8000332:	4013      	ands	r3, r2
 8000334:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000336:	7879      	ldrb	r1, [r7, #1]
 8000338:	78fb      	ldrb	r3, [r7, #3]
 800033a:	f1a3 0214 	sub.w	r2, r3, #20
 800033e:	4613      	mov	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	4413      	add	r3, r2
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800034a:	68fa      	ldr	r2, [r7, #12]
 800034c:	68bb      	ldr	r3, [r7, #8]
 800034e:	4313      	orrs	r3, r2
 8000350:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	e045      	b.n	80003e6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800035a:	78fb      	ldrb	r3, [r7, #3]
 800035c:	2b09      	cmp	r3, #9
 800035e:	d923      	bls.n	80003a8 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000366:	78fb      	ldrb	r3, [r7, #3]
 8000368:	f1a3 020a 	sub.w	r2, r3, #10
 800036c:	4613      	mov	r3, r2
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	4413      	add	r3, r2
 8000372:	2207      	movs	r2, #7
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	43db      	mvns	r3, r3
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	4013      	ands	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000384:	7879      	ldrb	r1, [r7, #1]
 8000386:	78fb      	ldrb	r3, [r7, #3]
 8000388:	f1a3 020a 	sub.w	r2, r3, #10
 800038c:	4613      	mov	r3, r2
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	4413      	add	r3, r2
 8000392:	fa01 f303 	lsl.w	r3, r1, r3
 8000396:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000398:	68fa      	ldr	r2, [r7, #12]
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	4313      	orrs	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68fa      	ldr	r2, [r7, #12]
 80003a4:	611a      	str	r2, [r3, #16]
 80003a6:	e01e      	b.n	80003e6 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 80003ae:	78fa      	ldrb	r2, [r7, #3]
 80003b0:	4613      	mov	r3, r2
 80003b2:	005b      	lsls	r3, r3, #1
 80003b4:	4413      	add	r3, r2
 80003b6:	2207      	movs	r2, #7
 80003b8:	fa02 f303 	lsl.w	r3, r2, r3
 80003bc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	43db      	mvns	r3, r3
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	4013      	ands	r3, r2
 80003c6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80003c8:	7879      	ldrb	r1, [r7, #1]
 80003ca:	78fa      	ldrb	r2, [r7, #3]
 80003cc:	4613      	mov	r3, r2
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	4413      	add	r3, r2
 80003d2:	fa01 f303 	lsl.w	r3, r1, r3
 80003d6:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80003d8:	68fa      	ldr	r2, [r7, #12]
 80003da:	68bb      	ldr	r3, [r7, #8]
 80003dc:	4313      	orrs	r3, r2
 80003de:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80003e6:	78bb      	ldrb	r3, [r7, #2]
 80003e8:	2b06      	cmp	r3, #6
 80003ea:	d821      	bhi.n	8000430 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003f0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80003f2:	78bb      	ldrb	r3, [r7, #2]
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	4613      	mov	r3, r2
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	4413      	add	r3, r2
 80003fc:	221f      	movs	r2, #31
 80003fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000402:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	43db      	mvns	r3, r3
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	4013      	ands	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 800040e:	78f9      	ldrb	r1, [r7, #3]
 8000410:	78bb      	ldrb	r3, [r7, #2]
 8000412:	1e5a      	subs	r2, r3, #1
 8000414:	4613      	mov	r3, r2
 8000416:	009b      	lsls	r3, r3, #2
 8000418:	4413      	add	r3, r2
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000420:	68fa      	ldr	r2, [r7, #12]
 8000422:	68bb      	ldr	r3, [r7, #8]
 8000424:	4313      	orrs	r3, r2
 8000426:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	68fa      	ldr	r2, [r7, #12]
 800042c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800042e:	e095      	b.n	800055c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000430:	78bb      	ldrb	r3, [r7, #2]
 8000432:	2b0c      	cmp	r3, #12
 8000434:	d821      	bhi.n	800047a <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800043a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 800043c:	78bb      	ldrb	r3, [r7, #2]
 800043e:	1fda      	subs	r2, r3, #7
 8000440:	4613      	mov	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	221f      	movs	r2, #31
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	43db      	mvns	r3, r3
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4013      	ands	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000458:	78f9      	ldrb	r1, [r7, #3]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	1fda      	subs	r2, r3, #7
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	4313      	orrs	r3, r2
 8000470:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000478:	e070      	b.n	800055c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	2b12      	cmp	r3, #18
 800047e:	d823      	bhi.n	80004c8 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000484:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000486:	78bb      	ldrb	r3, [r7, #2]
 8000488:	f1a3 020d 	sub.w	r2, r3, #13
 800048c:	4613      	mov	r3, r2
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	4413      	add	r3, r2
 8000492:	221f      	movs	r2, #31
 8000494:	fa02 f303 	lsl.w	r3, r2, r3
 8000498:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	43db      	mvns	r3, r3
 800049e:	68fa      	ldr	r2, [r7, #12]
 80004a0:	4013      	ands	r3, r2
 80004a2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80004a4:	78f9      	ldrb	r1, [r7, #3]
 80004a6:	78bb      	ldrb	r3, [r7, #2]
 80004a8:	f1a3 020d 	sub.w	r2, r3, #13
 80004ac:	4613      	mov	r3, r2
 80004ae:	009b      	lsls	r3, r3, #2
 80004b0:	4413      	add	r3, r2
 80004b2:	fa01 f303 	lsl.w	r3, r1, r3
 80004b6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80004b8:	68fa      	ldr	r2, [r7, #12]
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	4313      	orrs	r3, r2
 80004be:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	68fa      	ldr	r2, [r7, #12]
 80004c4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80004c6:	e049      	b.n	800055c <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80004c8:	78bb      	ldrb	r3, [r7, #2]
 80004ca:	2b18      	cmp	r3, #24
 80004cc:	d823      	bhi.n	8000516 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004d2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80004d4:	78bb      	ldrb	r3, [r7, #2]
 80004d6:	f1a3 0213 	sub.w	r2, r3, #19
 80004da:	4613      	mov	r3, r2
 80004dc:	009b      	lsls	r3, r3, #2
 80004de:	4413      	add	r3, r2
 80004e0:	221f      	movs	r2, #31
 80004e2:	fa02 f303 	lsl.w	r3, r2, r3
 80004e6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	43db      	mvns	r3, r3
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	4013      	ands	r3, r2
 80004f0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80004f2:	78f9      	ldrb	r1, [r7, #3]
 80004f4:	78bb      	ldrb	r3, [r7, #2]
 80004f6:	f1a3 0213 	sub.w	r2, r3, #19
 80004fa:	4613      	mov	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	4413      	add	r3, r2
 8000500:	fa01 f303 	lsl.w	r3, r1, r3
 8000504:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	68bb      	ldr	r3, [r7, #8]
 800050a:	4313      	orrs	r3, r2
 800050c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	68fa      	ldr	r2, [r7, #12]
 8000512:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000514:	e022      	b.n	800055c <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 800051c:	78bb      	ldrb	r3, [r7, #2]
 800051e:	f1a3 0219 	sub.w	r2, r3, #25
 8000522:	4613      	mov	r3, r2
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	4413      	add	r3, r2
 8000528:	221f      	movs	r2, #31
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	43db      	mvns	r3, r3
 8000534:	68fa      	ldr	r2, [r7, #12]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800053a:	78f9      	ldrb	r1, [r7, #3]
 800053c:	78bb      	ldrb	r3, [r7, #2]
 800053e:	f1a3 0219 	sub.w	r2, r3, #25
 8000542:	4613      	mov	r3, r2
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	4413      	add	r3, r2
 8000548:	fa01 f303 	lsl.w	r3, r1, r3
 800054c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	4313      	orrs	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800055c:	bf00      	nop
 800055e:	3714      	adds	r7, #20
 8000560:	46bd      	mov	sp, r7
 8000562:	bc80      	pop	{r7}
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	609a      	str	r2, [r3, #8]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	bc80      	pop	{r7}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000594:	b29b      	uxth	r3, r3
}
 8000596:	4618      	mov	r0, r3
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	887b      	ldrh	r3, [r7, #2]
 80005b6:	4013      	ands	r3, r2
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d002      	beq.n	80005c2 <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e001      	b.n	80005c6 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b087      	sub	sp, #28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	2300      	movs	r3, #0
 80005e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	617b      	str	r3, [r7, #20]
 80005ee:	e07e      	b.n	80006ee <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80005f0:	2201      	movs	r2, #1
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	693b      	ldr	r3, [r7, #16]
 8000600:	4013      	ands	r3, r2
 8000602:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000604:	68fa      	ldr	r2, [r7, #12]
 8000606:	693b      	ldr	r3, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d16d      	bne.n	80006e8 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	2103      	movs	r1, #3
 8000616:	fa01 f303 	lsl.w	r3, r1, r3
 800061a:	43db      	mvns	r3, r3
 800061c:	401a      	ands	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	791b      	ldrb	r3, [r3, #4]
 800062a:	4619      	mov	r1, r3
 800062c:	697b      	ldr	r3, [r7, #20]
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	fa01 f303 	lsl.w	r3, r1, r3
 8000634:	431a      	orrs	r2, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d003      	beq.n	800064a <GPIO_Init+0x76>
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d136      	bne.n	80006b8 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	2103      	movs	r1, #3
 8000654:	fa01 f303 	lsl.w	r3, r1, r3
 8000658:	43db      	mvns	r3, r3
 800065a:	401a      	ands	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	689a      	ldr	r2, [r3, #8]
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	4619      	mov	r1, r3
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	fa01 f303 	lsl.w	r3, r1, r3
 8000672:	431a      	orrs	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	889b      	ldrh	r3, [r3, #4]
 800067c:	b29a      	uxth	r2, r3
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	b29b      	uxth	r3, r3
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f303 	lsl.w	r3, r1, r3
 8000688:	b29b      	uxth	r3, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	b29b      	uxth	r3, r3
 800068e:	4013      	ands	r3, r2
 8000690:	b29a      	uxth	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	889b      	ldrh	r3, [r3, #4]
 800069a:	b29b      	uxth	r3, r3
 800069c:	b21a      	sxth	r2, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	799b      	ldrb	r3, [r3, #6]
 80006a2:	4619      	mov	r1, r3
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	b21b      	sxth	r3, r3
 80006ae:	4313      	orrs	r3, r2
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	68da      	ldr	r2, [r3, #12]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	2103      	movs	r1, #3
 80006c4:	fa01 f303 	lsl.w	r3, r1, r3
 80006c8:	43db      	mvns	r3, r3
 80006ca:	401a      	ands	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	68da      	ldr	r2, [r3, #12]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	4619      	mov	r1, r3
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006e8:	697b      	ldr	r3, [r7, #20]
 80006ea:	3301      	adds	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	f67f af7d 	bls.w	80005f0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80006f6:	bf00      	nop
 80006f8:	371c      	adds	r7, #28
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	460b      	mov	r3, r1
 800070a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	887a      	ldrh	r2, [r7, #2]
 8000710:	835a      	strh	r2, [r3, #26]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <GPIO_ToggleBits>:
  * @param  GPIOx: where x can be (A..H) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	8a9b      	ldrh	r3, [r3, #20]
 800072c:	b29a      	uxth	r2, r3
 800072e:	887b      	ldrh	r3, [r7, #2]
 8000730:	4053      	eors	r3, r2
 8000732:	b29a      	uxth	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	829a      	strh	r2, [r3, #20]
}
 8000738:	bf00      	nop
 800073a:	370c      	adds	r7, #12
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop

08000744 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <RCC_HSICmd+0x1c>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	42470000 	.word	0x42470000

08000764 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d006      	beq.n	8000784 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000776:	4909      	ldr	r1, [pc, #36]	; (800079c <RCC_AHBPeriphClockCmd+0x38>)
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <RCC_AHBPeriphClockCmd+0x38>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	4313      	orrs	r3, r2
 8000780:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000782:	e006      	b.n	8000792 <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000784:	4905      	ldr	r1, [pc, #20]	; (800079c <RCC_AHBPeriphClockCmd+0x38>)
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <RCC_AHBPeriphClockCmd+0x38>)
 8000788:	69da      	ldr	r2, [r3, #28]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	43db      	mvns	r3, r3
 800078e:	4013      	ands	r3, r2
 8000790:	61cb      	str	r3, [r1, #28]
  }
}
 8000792:	bf00      	nop
 8000794:	370c      	adds	r7, #12
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40023800 	.word	0x40023800

080007a0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007ac:	78fb      	ldrb	r3, [r7, #3]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <RCC_APB2PeriphClockCmd+0x38>)
 80007b4:	4b08      	ldr	r3, [pc, #32]	; (80007d8 <RCC_APB2PeriphClockCmd+0x38>)
 80007b6:	6a1a      	ldr	r2, [r3, #32]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4313      	orrs	r3, r2
 80007bc:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007be:	e006      	b.n	80007ce <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007c0:	4905      	ldr	r1, [pc, #20]	; (80007d8 <RCC_APB2PeriphClockCmd+0x38>)
 80007c2:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <RCC_APB2PeriphClockCmd+0x38>)
 80007c4:	6a1a      	ldr	r2, [r3, #32]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4013      	ands	r3, r2
 80007cc:	620b      	str	r3, [r1, #32]
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr
 80007d8:	40023800 	.word	0x40023800

080007dc <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 80007dc:	b480      	push	{r7}
 80007de:	b087      	sub	sp, #28
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	095b      	lsrs	r3, r3, #5
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d103      	bne.n	8000808 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000800:	4b0e      	ldr	r3, [pc, #56]	; (800083c <RCC_GetFlagStatus+0x60>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	617b      	str	r3, [r7, #20]
 8000806:	e002      	b.n	800080e <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <RCC_GetFlagStatus+0x60>)
 800080a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	fa22 f303 	lsr.w	r3, r2, r3
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	2b00      	cmp	r3, #0
 8000824:	d002      	beq.n	800082c <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000826:	2301      	movs	r3, #1
 8000828:	74fb      	strb	r3, [r7, #19]
 800082a:	e001      	b.n	8000830 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 800082c:	2300      	movs	r3, #0
 800082e:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000830:	7cfb      	ldrb	r3, [r7, #19]
}
 8000832:	4618      	mov	r0, r3
 8000834:	371c      	adds	r7, #28
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr
 800083c:	40023800 	.word	0x40023800

08000840 <adc_init>:
**
**===========================================================================
*/

void adc_init(void)
  {
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0
  	GPIO_InitTypeDef GPIO_InitStructure;
  	ADC_InitTypeDef ADC_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000846:	2101      	movs	r1, #1
 8000848:	2001      	movs	r0, #1
 800084a:	f7ff ff8b 	bl	8000764 <RCC_AHBPeriphClockCmd>
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 800084e:	2302      	movs	r3, #2
 8000850:	61bb      	str	r3, [r7, #24]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000852:	2303      	movs	r3, #3
 8000854:	773b      	strb	r3, [r7, #28]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000856:	2300      	movs	r3, #0
 8000858:	77fb      	strb	r3, [r7, #31]
  	// LEDka//
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5 ;
 800085a:	2320      	movs	r3, #32
 800085c:	61bb      	str	r3, [r7, #24]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800085e:	2301      	movs	r3, #1
 8000860:	773b      	strb	r3, [r7, #28]
  	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000862:	2300      	movs	r3, #0
 8000864:	77bb      	strb	r3, [r7, #30]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000866:	2301      	movs	r3, #1
 8000868:	77fb      	strb	r3, [r7, #31]
  	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800086a:	2303      	movs	r3, #3
 800086c:	777b      	strb	r3, [r7, #29]
  	////
  	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800086e:	f107 0318 	add.w	r3, r7, #24
 8000872:	4619      	mov	r1, r3
 8000874:	481e      	ldr	r0, [pc, #120]	; (80008f0 <adc_init+0xb0>)
 8000876:	f7ff fead 	bl	80005d4 <GPIO_Init>
  	RCC_HSICmd(ENABLE);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ff62 	bl	8000744 <RCC_HSICmd>
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000880:	bf00      	nop
 8000882:	2021      	movs	r0, #33	; 0x21
 8000884:	f7ff ffaa 	bl	80007dc <RCC_GetFlagStatus>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d0f9      	beq.n	8000882 <adc_init+0x42>
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800088e:	2101      	movs	r1, #1
 8000890:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000894:	f7ff ff84 	bl	80007a0 <RCC_APB2PeriphClockCmd>
  	ADC_StructInit(&ADC_InitStructure);
 8000898:	463b      	mov	r3, r7
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fcc2 	bl	8000224 <ADC_StructInit>
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
  	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	717b      	strb	r3, [r7, #5]
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80008ac:	2300      	movs	r3, #0
 80008ae:	613b      	str	r3, [r7, #16]
  	ADC_InitStructure.ADC_NbrOfConversion = 1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	753b      	strb	r3, [r7, #20]
  	ADC_Init(ADC1, &ADC_InitStructure);
 80008b4:	463b      	mov	r3, r7
 80008b6:	4619      	mov	r1, r3
 80008b8:	480e      	ldr	r0, [pc, #56]	; (80008f4 <adc_init+0xb4>)
 80008ba:	f7ff fc5f 	bl	800017c <ADC_Init>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
 80008be:	2302      	movs	r3, #2
 80008c0:	2201      	movs	r2, #1
 80008c2:	2101      	movs	r1, #1
 80008c4:	480b      	ldr	r0, [pc, #44]	; (80008f4 <adc_init+0xb4>)
 80008c6:	f7ff fce9 	bl	800029c <ADC_RegularChannelConfig>
  	ADC_Cmd(ADC1, ENABLE);
 80008ca:	2101      	movs	r1, #1
 80008cc:	4809      	ldr	r0, [pc, #36]	; (80008f4 <adc_init+0xb4>)
 80008ce:	f7ff fcc9 	bl	8000264 <ADC_Cmd>
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 80008d2:	bf00      	nop
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	4807      	ldr	r0, [pc, #28]	; (80008f4 <adc_init+0xb4>)
 80008d8:	f7ff fe62 	bl	80005a0 <ADC_GetFlagStatus>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <adc_init+0x94>
  	ADC_SoftwareStartConv(ADC1);
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <adc_init+0xb4>)
 80008e4:	f7ff fe40 	bl	8000568 <ADC_SoftwareStartConv>
  }
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40020000 	.word	0x40020000
 80008f4:	40012400 	.word	0x40012400

080008f8 <blikamLEDku>:

int blikamLEDku(int tlacitko){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if (tlacitko == 0){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <blikamLEDku+0x18>
		GPIO_ResetBits(GPIOA, GPIO_Pin_5);
 8000906:	2120      	movs	r1, #32
 8000908:	483c      	ldr	r0, [pc, #240]	; (80009fc <blikamLEDku+0x104>)
 800090a:	f7ff fef9 	bl	8000700 <GPIO_ResetBits>
 800090e:	e070      	b.n	80009f2 <blikamLEDku+0xfa>
	}
	else if (tlacitko == 1){
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d118      	bne.n	8000948 <blikamLEDku+0x50>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8000916:	2120      	movs	r1, #32
 8000918:	4838      	ldr	r0, [pc, #224]	; (80009fc <blikamLEDku+0x104>)
 800091a:	f7ff feff 	bl	800071c <GPIO_ToggleBits>
		for (int i=1; i<= 500; i++){
 800091e:	2301      	movs	r3, #1
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
 8000922:	e00c      	b.n	800093e <blikamLEDku+0x46>
			for (int j=1; j<= 500; j++){
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
 8000928:	e002      	b.n	8000930 <blikamLEDku+0x38>
 800092a:	6a3b      	ldr	r3, [r7, #32]
 800092c:	3301      	adds	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
 8000930:	6a3b      	ldr	r3, [r7, #32]
 8000932:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000936:	ddf8      	ble.n	800092a <blikamLEDku+0x32>
	if (tlacitko == 0){
		GPIO_ResetBits(GPIOA, GPIO_Pin_5);
	}
	else if (tlacitko == 1){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (int i=1; i<= 500; i++){
 8000938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093a:	3301      	adds	r3, #1
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000944:	ddee      	ble.n	8000924 <blikamLEDku+0x2c>
 8000946:	e054      	b.n	80009f2 <blikamLEDku+0xfa>
			for (int j=1; j<= 500; j++){
				}
		}
	}
	else if (tlacitko == 2){
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b02      	cmp	r3, #2
 800094c:	d118      	bne.n	8000980 <blikamLEDku+0x88>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 800094e:	2120      	movs	r1, #32
 8000950:	482a      	ldr	r0, [pc, #168]	; (80009fc <blikamLEDku+0x104>)
 8000952:	f7ff fee3 	bl	800071c <GPIO_ToggleBits>
		for (int i=1; i<= 1000; i++){
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
 800095a:	e00c      	b.n	8000976 <blikamLEDku+0x7e>
			for (int j=1; j<= 1000; j++){
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
 8000960:	e002      	b.n	8000968 <blikamLEDku+0x70>
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	3301      	adds	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
 8000968:	69bb      	ldr	r3, [r7, #24]
 800096a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800096e:	ddf8      	ble.n	8000962 <blikamLEDku+0x6a>
				}
		}
	}
	else if (tlacitko == 2){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (int i=1; i<= 1000; i++){
 8000970:	69fb      	ldr	r3, [r7, #28]
 8000972:	3301      	adds	r3, #1
 8000974:	61fb      	str	r3, [r7, #28]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800097c:	ddee      	ble.n	800095c <blikamLEDku+0x64>
 800097e:	e038      	b.n	80009f2 <blikamLEDku+0xfa>
			for (int j=1; j<= 1000; j++){
				}
		}
	}
	else if (tlacitko == 3){
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b03      	cmp	r3, #3
 8000984:	d11a      	bne.n	80009bc <blikamLEDku+0xc4>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8000986:	2120      	movs	r1, #32
 8000988:	481c      	ldr	r0, [pc, #112]	; (80009fc <blikamLEDku+0x104>)
 800098a:	f7ff fec7 	bl	800071c <GPIO_ToggleBits>
		for (int i=1; i<= 1500; i++){
 800098e:	2301      	movs	r3, #1
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	e00d      	b.n	80009b0 <blikamLEDku+0xb8>
			for (int j=1; j<= 1500; j++){
 8000994:	2301      	movs	r3, #1
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	e002      	b.n	80009a0 <blikamLEDku+0xa8>
 800099a:	693b      	ldr	r3, [r7, #16]
 800099c:	3301      	adds	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009a6:	4293      	cmp	r3, r2
 80009a8:	ddf7      	ble.n	800099a <blikamLEDku+0xa2>
				}
		}
	}
	else if (tlacitko == 3){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (int i=1; i<= 1500; i++){
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80009b6:	4293      	cmp	r3, r2
 80009b8:	ddec      	ble.n	8000994 <blikamLEDku+0x9c>
 80009ba:	e01a      	b.n	80009f2 <blikamLEDku+0xfa>
			for (int j=1; j<= 1500; j++){
				}
		}
	}
	else if (tlacitko == 4){
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d117      	bne.n	80009f2 <blikamLEDku+0xfa>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 80009c2:	2120      	movs	r1, #32
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <blikamLEDku+0x104>)
 80009c6:	f7ff fea9 	bl	800071c <GPIO_ToggleBits>
		for (int i=1; i<= 500; i++){
 80009ca:	2301      	movs	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	e00c      	b.n	80009ea <blikamLEDku+0xf2>
			for (int j=1; j<= 500; j++){
 80009d0:	2301      	movs	r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	e002      	b.n	80009dc <blikamLEDku+0xe4>
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	3301      	adds	r3, #1
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009e2:	ddf8      	ble.n	80009d6 <blikamLEDku+0xde>
				}
		}
	}
	else if (tlacitko == 4){
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
		for (int i=1; i<= 500; i++){
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	3301      	adds	r3, #1
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80009f0:	ddee      	ble.n	80009d0 <blikamLEDku+0xd8>
			for (int j=1; j<= 500; j++){
				}
		}
	}
	return 0;
 80009f2:	2300      	movs	r3, #0
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3728      	adds	r7, #40	; 0x28
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40020000 	.word	0x40020000

08000a00 <main>:

int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
	uint16_t AD_value;

	adc_init();
 8000a06:	f7ff ff1b 	bl	8000840 <adc_init>

	while (1){
		ADC_SoftwareStartConv(ADC1);
 8000a0a:	4827      	ldr	r0, [pc, #156]	; (8000aa8 <main+0xa8>)
 8000a0c:	f7ff fdac 	bl	8000568 <ADC_SoftwareStartConv>
		while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 8000a10:	bf00      	nop
 8000a12:	2102      	movs	r1, #2
 8000a14:	4824      	ldr	r0, [pc, #144]	; (8000aa8 <main+0xa8>)
 8000a16:	f7ff fdc3 	bl	80005a0 <ADC_GetFlagStatus>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f8      	beq.n	8000a12 <main+0x12>

		AD_value=ADC_GetConversionValue(ADC1);
 8000a20:	4821      	ldr	r0, [pc, #132]	; (8000aa8 <main+0xa8>)
 8000a22:	f7ff fdb1 	bl	8000588 <ADC_GetConversionValue>
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]

		if ((AD_value>=1980) && (AD_value<=2100)){
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d908      	bls.n	8000a46 <main+0x46>
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	f640 0234 	movw	r2, #2100	; 0x834
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d803      	bhi.n	8000a46 <main+0x46>
			blikamLEDku(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff ff5a 	bl	80008f8 <blikamLEDku>
 8000a44:	e02e      	b.n	8000aa4 <main+0xa4>
 	 	}
		else if ((AD_value>=2800) && (AD_value<=2940)){
 8000a46:	88fb      	ldrh	r3, [r7, #6]
 8000a48:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000a4c:	d308      	bcc.n	8000a60 <main+0x60>
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	f640 327c 	movw	r2, #2940	; 0xb7c
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d803      	bhi.n	8000a60 <main+0x60>
			blikamLEDku(2);
 8000a58:	2002      	movs	r0, #2
 8000a5a:	f7ff ff4d 	bl	80008f8 <blikamLEDku>
 8000a5e:	e021      	b.n	8000aa4 <main+0xa4>
 	 	}
		else if ((AD_value>=3440) && (AD_value<=3480)){
 8000a60:	88fb      	ldrh	r3, [r7, #6]
 8000a62:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8000a66:	d308      	bcc.n	8000a7a <main+0x7a>
 8000a68:	88fb      	ldrh	r3, [r7, #6]
 8000a6a:	f640 5298 	movw	r2, #3480	; 0xd98
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d803      	bhi.n	8000a7a <main+0x7a>
			blikamLEDku(3);
 8000a72:	2003      	movs	r0, #3
 8000a74:	f7ff ff40 	bl	80008f8 <blikamLEDku>
 8000a78:	e014      	b.n	8000aa4 <main+0xa4>
 	 	}
		else if ((AD_value>=3640) && (AD_value<=3680)){
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	f640 6237 	movw	r2, #3639	; 0xe37
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d907      	bls.n	8000a94 <main+0x94>
 8000a84:	88fb      	ldrh	r3, [r7, #6]
 8000a86:	f5b3 6f66 	cmp.w	r3, #3680	; 0xe60
 8000a8a:	d803      	bhi.n	8000a94 <main+0x94>
			blikamLEDku(4);
 8000a8c:	2004      	movs	r0, #4
 8000a8e:	f7ff ff33 	bl	80008f8 <blikamLEDku>
 8000a92:	e007      	b.n	8000aa4 <main+0xa4>
 	 	}
		else if ((AD_value>=3900)){
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d9b5      	bls.n	8000a0a <main+0xa>
			blikamLEDku(0);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff2a 	bl	80008f8 <blikamLEDku>
		}
	}
 8000aa4:	e7b1      	b.n	8000a0a <main+0xa>
 8000aa6:	bf00      	nop
 8000aa8:	40012400 	.word	0x40012400

08000aac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ab0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ab2:	e003      	b.n	8000abc <LoopCopyDataInit>

08000ab4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8000ab6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ab8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000aba:	3104      	adds	r1, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000abc:	480b      	ldr	r0, [pc, #44]	; (8000aec <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8000ac0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ac4:	d3f6      	bcc.n	8000ab4 <CopyDataInit>
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8000ac8:	e002      	b.n	8000ad0 <LoopFillZerobss>

08000aca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000acc:	f842 3b04 	str.w	r3, [r2], #4

08000ad0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ad0:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8000ad2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ad4:	d3f9      	bcc.n	8000aca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f000 f841 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f000 f903 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ade:	f7ff ff8f 	bl	8000a00 <main>
  bx lr
 8000ae2:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae4:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000ae8:	08000d50 	.word	0x08000d50
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000af0:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8000af4:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000af8:	2000001c 	.word	0x2000001c

08000afc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_IRQHandler>
	...

08000b00 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000b10:	e7fe      	b.n	8000b10 <HardFault_Handler+0x4>
 8000b12:	bf00      	nop

08000b14 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>
 8000b1a:	bf00      	nop

08000b1c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000b20:	e7fe      	b.n	8000b20 <BusFault_Handler+0x4>
 8000b22:	bf00      	nop

08000b24 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000b28:	e7fe      	b.n	8000b28 <UsageFault_Handler+0x4>
 8000b2a:	bf00      	nop

08000b2c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr

08000b38 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000b60:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <SystemInit+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <SystemInit+0x5c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b6a:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000b6c:	4912      	ldr	r1, [pc, #72]	; (8000bb8 <SystemInit+0x5c>)
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <SystemInit+0x5c>)
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <SystemInit+0x60>)
 8000b74:	4013      	ands	r3, r2
 8000b76:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <SystemInit+0x5c>)
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <SystemInit+0x5c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000b82:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000b86:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000b88:	4a0b      	ldr	r2, [pc, #44]	; (8000bb8 <SystemInit+0x5c>)
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <SystemInit+0x5c>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b92:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000b94:	4a08      	ldr	r2, [pc, #32]	; (8000bb8 <SystemInit+0x5c>)
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <SystemInit+0x5c>)
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000b9e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SystemInit+0x5c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8000ba6:	f000 f80d 	bl	8000bc4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000baa:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SystemInit+0x64>)
 8000bac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bb0:	609a      	str	r2, [r3, #8]
#endif
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	88ffc00c 	.word	0x88ffc00c
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000bd2:	4a41      	ldr	r2, [pc, #260]	; (8000cd8 <SetSysClock+0x114>)
 8000bd4:	4b40      	ldr	r3, [pc, #256]	; (8000cd8 <SetSysClock+0x114>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000bde:	4b3e      	ldr	r3, [pc, #248]	; (8000cd8 <SetSysClock+0x114>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d103      	bne.n	8000bfc <SetSysClock+0x38>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bfa:	d1f0      	bne.n	8000bde <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bfc:	4b36      	ldr	r3, [pc, #216]	; (8000cd8 <SetSysClock+0x114>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	603b      	str	r3, [r7, #0]
 8000c0c:	e001      	b.n	8000c12 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d15a      	bne.n	8000cce <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000c18:	4a30      	ldr	r2, [pc, #192]	; (8000cdc <SetSysClock+0x118>)
 8000c1a:	4b30      	ldr	r3, [pc, #192]	; (8000cdc <SetSysClock+0x118>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f043 0304 	orr.w	r3, r3, #4
 8000c22:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000c24:	4a2d      	ldr	r2, [pc, #180]	; (8000cdc <SetSysClock+0x118>)
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <SetSysClock+0x118>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f043 0302 	orr.w	r3, r3, #2
 8000c2e:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000c30:	4a2a      	ldr	r2, [pc, #168]	; (8000cdc <SetSysClock+0x118>)
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <SetSysClock+0x118>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000c3c:	4a26      	ldr	r2, [pc, #152]	; (8000cd8 <SetSysClock+0x114>)
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <SetSysClock+0x114>)
 8000c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c46:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <SetSysClock+0x11c>)
 8000c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c4e:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000c50:	bf00      	nop
 8000c52:	4b23      	ldr	r3, [pc, #140]	; (8000ce0 <SetSysClock+0x11c>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 0310 	and.w	r3, r3, #16
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f9      	bne.n	8000c52 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000c5e:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <SetSysClock+0x114>)
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <SetSysClock+0x114>)
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <SetSysClock+0x114>)
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <SetSysClock+0x114>)
 8000c6a:	689b      	ldr	r3, [r3, #8]
 8000c6c:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000c6e:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <SetSysClock+0x114>)
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <SetSysClock+0x114>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000c76:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <SetSysClock+0x114>)
 8000c78:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <SetSysClock+0x114>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000c80:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <SetSysClock+0x114>)
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <SetSysClock+0x114>)
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8000c8c:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c8e:	4a12      	ldr	r2, [pc, #72]	; (8000cd8 <SetSysClock+0x114>)
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <SetSysClock+0x114>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c98:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c9a:	bf00      	nop
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <SetSysClock+0x114>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d0f9      	beq.n	8000c9c <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000ca8:	4a0b      	ldr	r2, [pc, #44]	; (8000cd8 <SetSysClock+0x114>)
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <SetSysClock+0x114>)
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	f023 0303 	bic.w	r3, r3, #3
 8000cb2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8000cb4:	4a08      	ldr	r2, [pc, #32]	; (8000cd8 <SetSysClock+0x114>)
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <SetSysClock+0x114>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f043 0303 	orr.w	r3, r3, #3
 8000cbe:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8000cc0:	bf00      	nop
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SetSysClock+0x114>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
 8000cca:	2b0c      	cmp	r3, #12
 8000ccc:	d1f9      	bne.n	8000cc2 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bc80      	pop	{r7}
 8000cd6:	4770      	bx	lr
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40023c00 	.word	0x40023c00
 8000ce0:	40007000 	.word	0x40007000

08000ce4 <__libc_init_array>:
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <__libc_init_array+0x3c>)
 8000ce6:	b570      	push	{r4, r5, r6, lr}
 8000ce8:	461e      	mov	r6, r3
 8000cea:	4c0e      	ldr	r4, [pc, #56]	; (8000d24 <__libc_init_array+0x40>)
 8000cec:	2500      	movs	r5, #0
 8000cee:	1ae4      	subs	r4, r4, r3
 8000cf0:	10a4      	asrs	r4, r4, #2
 8000cf2:	42a5      	cmp	r5, r4
 8000cf4:	d004      	beq.n	8000d00 <__libc_init_array+0x1c>
 8000cf6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000cfa:	4798      	blx	r3
 8000cfc:	3501      	adds	r5, #1
 8000cfe:	e7f8      	b.n	8000cf2 <__libc_init_array+0xe>
 8000d00:	f000 f816 	bl	8000d30 <_init>
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <__libc_init_array+0x44>)
 8000d06:	4c09      	ldr	r4, [pc, #36]	; (8000d2c <__libc_init_array+0x48>)
 8000d08:	461e      	mov	r6, r3
 8000d0a:	1ae4      	subs	r4, r4, r3
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	2500      	movs	r5, #0
 8000d10:	42a5      	cmp	r5, r4
 8000d12:	d004      	beq.n	8000d1e <__libc_init_array+0x3a>
 8000d14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d18:	4798      	blx	r3
 8000d1a:	3501      	adds	r5, #1
 8000d1c:	e7f8      	b.n	8000d10 <__libc_init_array+0x2c>
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
 8000d20:	08000d48 	.word	0x08000d48
 8000d24:	08000d48 	.word	0x08000d48
 8000d28:	08000d48 	.word	0x08000d48
 8000d2c:	08000d4c 	.word	0x08000d4c

08000d30 <_init>:
 8000d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d32:	bf00      	nop
 8000d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d36:	bc08      	pop	{r3}
 8000d38:	469e      	mov	lr, r3
 8000d3a:	4770      	bx	lr

08000d3c <_fini>:
 8000d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d3e:	bf00      	nop
 8000d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d42:	bc08      	pop	{r3}
 8000d44:	469e      	mov	lr, r3
 8000d46:	4770      	bx	lr
